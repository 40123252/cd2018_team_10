<!-- 導入 Brython 標準程式庫 --><p></p>
<script src="../data/Brython-3.3.1/brython.js"></script>
 
<script src="../data/Brython-3.3.1/brython_stdlib.js"></script>
 
<!-- 啟動 Brython -->
 
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
 
<!-- Cango 程式庫 -->
 
<script type="text/javascript" src="./../cango
/Cango-9v05-min.js"></script>
 
<script type="text/javascript" src="./../cango
/CangoAxes-2v09.js"></script>
 
<script type="text/javascript" src="./../cango
/CangoAnimation-5v00.js"></script>
 
<script type="text/javascript" src="./../cango
/gearUtils-05.js"></script>
 
<canvas id="cango_gear" width="800" height="700"></canvas>
 
<!-- 以下製作 button-->
 
<div id="cango_gear_div" width="800" height="20"></div>
 
<p><input id="na" value="50"><br>
<input id="nb" value="25"><br></p>
<button id="button_d">Set Number of Gears</button><p></p>
<script type="text/python">
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math
 
# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
 
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
 
######################################
# 畫正齒輪輪廓
#####################################
# 以 button 驅動的事件函式
def setgearnumber(e):
 
    x = 800/2
    y = 700/2
    if doc["na"].value.isdigit():
        n = int(doc["na"].value)
    else:
        n = 50
 
    if doc["nb"].value.isdigit():
        n2 = int(doc["nb"].value)
    else:
        n2 = 25
    def cangoGear(n, m, pa):
        # m 為模數, 根據畫布的寬度, 計算適合的模數大小
        # Module = mm of pitch diameter per tooth
        #m = 0.8*canvas.width/n
        # pr 為節圓半徑
        pr = n*m/2 # gear Pitch radius
        # generate gear
        data = creategeartooth(m, n, pa)
        # Brython 程式中的 print 會將資料印在 Browser 的 console 區
        #print(data)
        gearTooth = shape(data, {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
        gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
        # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
        gear = gearTooth.dup()
        # gear 為單一齒的輪廓資料
        #cgo.render(gearTooth)
 
        # 利用單齒輪廓旋轉, 產生整個正齒輪外形
        for i in range(1, n):
            # 將 gearTooth 中的資料複製到 newTooth
            newTooth = gearTooth.dup()
            # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
            newTooth.rotate(360*i/n)
            # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
            gear.appendPath(newTooth, True) # trim move command = True
 
        # 建立軸孔
        # add axle hole, hr 為 hole radius
        hr = 0.6*pr # diameter of gear shaft
        shaft = path(shapedefs.circle(hr))
        shaft.revWinding()
        gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
 
        # setup the animation
        # backlash (mm)
        bklsh = 0.04*m
        # centre shift to make backlash
        dC = bklsh/(2*math.tan(math.pi*pa/180))
        # np 為小齒輪齒數
        np = 25
        # gear ratio
        gr = n/np              
        gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
        # gr*0.666 rpm
        #pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
        # 0.666 rpm
        return gear
 
    # 設定兩齒齒數
    reduced_ratio = 0.5
    # 使用 80% 的畫布寬度
    m = 0.8*canvas.width/((n+n2)*reduced_ratio)
    # 設定共同的壓力角
    pa = 20
    # n 齒輪的節圓半徑
    pr = n*m/2
    # n2 齒輪的節圓半徑
    pr2 = n2*m/2
 
    from time import time
    from browser.timer import request_animation_frame as raf
    from browser.timer import set_interval
 
    deg = math.pi/180
 
    def draw():
        cgo.clearCanvas()
        gear.rotate(2*deg)
        # 在特定位置, 以特定 scale, 特定 degs 執行 render
        # 設定囓合點在畫布正中央
        # 囓合點往左偏 pr/2 即為 n 齒輪的圓心 x 座標
        #cgo.render(gear, {'x':cx-pr*reduced_ratio, 'y':cy, 'scl':reduced_ratio, 'degs':0})
        cgo.render(gear, {'x':cx-(pr+pr2)*reduced_ratio, 'y':cy, 'scl':0.5, 'degs':0})
        # 根據兩齒輪齒數比決定 n2 齒輪轉速
        gear1.rotate(-2*deg*n/n2)
 
        # 囓合點往右偏 pr2/2 即為 n2 齒輪的圓心 x 座標, 且 n2 齒轉 180 加一齒角度後囓合
        cgo.render(gear1, {'x':cx, 'y':cy, 'scl':reduced_ratio, 'degs':180+(360/n2/2)})
    set_interval(draw, 2)
 
    # 只使用畫布高度的 80%
    canvas_size = canvas.height*0.4
    r17 = canvas_size*n2/(n+n2)
    r11 = r17*n2/n
    # 計算各齒輪中心座標
    x17 = x -r17
    y17 = y
 
    x11 = x +r11
    y11 = y
    pa = 20
 
    # 開始繪製齒輪
    # 儲存原有的座標系統
    ctx.save()
    # 平移到齒輪圓心
    ctx.translate(x17, y17)
    # 以齒輪圓心旋轉 90 度, 讓紅色標線在齒輪右側保持水平
    ctx.rotate(90*deg)
    # 平移回原來的座標原點
    ctx.translate(-x17, -y17)
    gear = cangoGear(n, m, pa)
    cx = canvas.width/2 + 4 * n
    cy = canvas.height/2
    # 回復原有的座標系統
    ctx.restore()
    ctx.save()
    ctx.translate(x11, y11)
    # 中間齒輪轉動 -90 度加上一齒, 可以與左側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n2)
    ctx.translate(-x11, -y11)
    gear1 = cangoGear(n2, m, pa)
    ctx.restore()
 
setgearnumber(True)
doc['button_d'].bind('click',setgearnumber)
</script>